/*
 * OBS LÄMNA INTE IN UTAN ATT HA KOLLAT IGENOM KOMENTARERNA I DENNA FIL!
 * the visualistation of gameBoard, uses squareView and are used
 * by both classicModel and CampaignModel.
 */

package com.rojarna.projektrojarna;

/**
 *
 * @author Tom
 */
public class GameBoardView extends javax.swing.JPanel{
    /**
     * Creates new form GameBoardView
     */
    
    private AbstractGameModel model;
    
    public GameBoardView(AbstractGameModel model){
        initComponents();
        
        this.model=model;
        // OBS the gameBoard is never set so there may be problems!!
        // CampaginView och classicView kan inte ha ett gemensamt interface, då
        // det interfacet måste ha implementat proprtyChangeListener.
        // Och dom kan inte extenda saker eftersom dom redan är en JPanel.
        //I gameView körs GameBoard(Model, null) vilket buggar efter som nu
        // så finns det 2 konstruktorer som den kan passa på.
        //därför skapar jag änu en konstruktor som inte gör ett skit och använder den
        // så länge.
    }
    
    public GameBoardView(AbstractGameModel model, CampaignView view) {
        initComponents();
        
        this.model = model;
        setBoard(view);
    }
    
    public void renewBoard(CampaignView view){
        this.removeAll();
        setBoard(view);
    }
    
    private void setBoard(CampaignView view){
        setLayout(new java.awt.GridLayout(model.getWidth(),model.getHeight()));
        
        for(int x=0;x<model.getWidth();x++){
            for(int y=0;y<model.getHeight();y++){
                SquareView s = new SquareView(x,y);
                model.addObserver(s);
                s.addPropertyChangeListener(view);
                add(s);
            }
        }
    }
    // this is some copypaste shit, but cant make an interface, cuz of propertycahnge stuff
    // there for there will be duplicated code here, lets look at it at a later date.
    
    public GameBoardView(AbstractGameModel model, ClassicView view) {
        initComponents();
        
        this.model = model;
        setBoard(view);
    }
    
    public void renewBoard(ClassicView view){
        this.removeAll();
        setBoard(view);
    }
    
    private void setBoard(ClassicView view){
        setLayout(new java.awt.GridLayout(model.getWidth(),model.getHeight()));
        
        for(int x=0;x<model.getWidth();x++){
            for(int y=0;y<model.getHeight();y++){
                SquareView s = new SquareView(x,y);
                model.addObserver(s);
                s.addPropertyChangeListener(view);
                add(s);
            }
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setOpaque(false);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

}
