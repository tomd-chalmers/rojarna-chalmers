/*
 * The frame for the game...
 */

package com.rojarna.projektrojarna;

import java.awt.CardLayout;
import java.awt.GridLayout;
import java.beans.PropertyChangeListener;
import javax.swing.JPanel;

/**
 *
 * @author Gaming
 */
public class GameFrame extends javax.swing.JFrame{

    private final MenuPanel menuPanel;
    private final JPanel gameBoardPanel;
    
    /**
     * Creates new form GameFrame
     */
    public GameFrame() {
        initComponents();
        
        getContentPane().setLayout(new CardLayout());
        
        menuPanel = new MenuPanel();
        add(menuPanel, "Menu");
        
        gameBoardPanel = new JPanel();
        gameBoardPanel.setLayout(new GridLayout(1,1));
        add(gameBoardPanel, "Board");
        
        ((CardLayout)getContentPane().getLayout()).show(getContentPane(), "Menu");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(800, 500));
        setPreferredSize(new java.awt.Dimension(800, 500));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GameFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GameFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GameFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GameFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GameFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    public void setGamePanel(JPanel game){
        gameBoardPanel.removeAll();
        gameBoardPanel.add(game, "Board");
    }
    
    public void showGameMenu(){
        ((CardLayout)getContentPane().getLayout()).show(getContentPane(), "Menu");
    }
    
    public void showGameBoard(){
        ((CardLayout)getContentPane().getLayout()).show(getContentPane(), "Board");
    }
    
    @Override
    public void addPropertyChangeListener(PropertyChangeListener listener){
        menuPanel.addPropertyChangeListener(listener);
    }
    
    @Override
    public void removePropertyChangeListener(PropertyChangeListener listener){
        menuPanel.removePropertyChangeListener(listener);
    }
}
