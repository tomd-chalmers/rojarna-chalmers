/**
 * The view of square, uses images to represent, mines or numbers.
 * are used by GameBoardView.
 * @author Oskar
 */

package View;

import Model.AbstractGameModel;
import Model.Square;
import java.awt.CardLayout;
import java.util.Observable;
import java.util.Observer;
import javax.swing.ImageIcon;
import javax.swing.JLabel;

public class SquareView extends javax.swing.JPanel implements Observer{
    
    private final int x;
    private final int y;
    

    /**
     * Creates new form SquareView
     */
    public SquareView(int x, int y) {
        
        this.x=x;
        this.y=y;
        
        initComponents();
        contentLabel = new JLabel();
        contentCard.add(contentLabel);
        
        CardLayout c = (CardLayout)(this.getLayout());
        c.show(this,"button");
    }
    
    private void setContent(Square s){
        if(s.getItem()==Square.Item.MINE){
            contentLabel.setIcon(new ImageIcon(getClass().getResource("/images/mine.32.png")));
        }else{
            switch(s.getValue()){
                case 0:
                    contentLabel.setIcon(new ImageIcon(getClass().getResource("/images/nbr-0.png")));
                    break;
                case 1:
                    contentLabel.setIcon(new ImageIcon(getClass().getResource("/images/nbr-1.png")));
                    break;
                case 2:
                    contentLabel.setIcon(new ImageIcon(getClass().getResource("/images/nbr-2.png")));
                    break;
                case 3:
                    contentLabel.setIcon(new ImageIcon(getClass().getResource("/images/nbr-3.png")));
                    break;
                case 4:
                    contentLabel.setIcon(new ImageIcon(getClass().getResource("/images/nbr-4.png")));
                    break;
                case 5:
                    contentLabel.setIcon(new ImageIcon(getClass().getResource("/images/nbr-5.png")));
                    break;
                case 6:
                    contentLabel.setIcon(new ImageIcon(getClass().getResource("/images/nbr-6.png")));
                    break;
                case 7:
                    contentLabel.setIcon(new ImageIcon(getClass().getResource("/images/nbr-7.png")));
                    break;
                case 8:
                    contentLabel.setIcon(new ImageIcon(getClass().getResource("/images/nbr-8.png")));
                    break;
            }
        }
    }
    
    private void setButtonIcon(Square.Marking m){
        switch(m){
            case NONE:
                button.setIcon(null);
                break;
            case FLAG:
                button.setIcon(new ImageIcon(getClass().getResource("/images/flag.png")));
                break;
            case QUESTION:
                button.setIcon(new ImageIcon(getClass().getResource("/images/question.png")));
                break;
        }
    }
    
    public int getXPos(){
        return x;
    }
    public int getYPos(){
        return y;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        contentCard = new javax.swing.JPanel();
        buttonCard = new javax.swing.JPanel();
        button = new javax.swing.JButton();

        setOpaque(false);
        setLayout(new java.awt.CardLayout());

        contentCard.setBackground(new java.awt.Color(255, 255, 255));
        contentCard.setLayout(new java.awt.GridBagLayout());
        add(contentCard, "content");

        buttonCard.setOpaque(false);
        buttonCard.setLayout(new java.awt.GridLayout(1, 1));

        button.setBorder(null);
        button.setFocusable(false);
        button.setMaximumSize(new java.awt.Dimension(40, 40));
        button.setMinimumSize(new java.awt.Dimension(40, 40));
        button.setPreferredSize(new java.awt.Dimension(37, 37));
        button.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                buttonMousePressed(evt);
            }
        });
        buttonCard.add(button);

        add(buttonCard, "button");
    }// </editor-fold>//GEN-END:initComponents

    private void buttonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonMousePressed
        if (evt.getButton()==1){ //Vänsterklick
            this.firePropertyChange("leftClick", null , this);
        }else if(evt.getButton()==3){ //Högerklick
            this.firePropertyChange("rightClick",0,this);
        }
    }//GEN-LAST:event_buttonMousePressed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton button;
    private javax.swing.JPanel buttonCard;
    private javax.swing.JPanel contentCard;
    // End of variables declaration//GEN-END:variables
    private JLabel contentLabel;

    public void update(Observable o, Object arg) {
        AbstractGameModel model = (AbstractGameModel)o;
        if(model.getSquare(x,y).isVisible()){
            setContent(model.getSquare(x,y));
            
            CardLayout c = (CardLayout)(this.getLayout());
            c.show(this,"content");
        }else{
            CardLayout c = (CardLayout)(this.getLayout());
            
            c.show(this,"button");
            setButtonIcon(model.getSquare(x,y).getMarking());
        }
    }
}
